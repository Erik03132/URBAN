def is_prime(func): # определяем декоратор is_prime
    def wrapper(*args, **kwargs): # определяем внутреннюю функцию wrapper
        result = func(*args, **kwargs) # вызываем исходную функцию и сохраняем её результат
        if result > 1: # проверяем, что результат больше 1 (простые числа начинаются с 2)
            for i in range(2, int(result ** 0.5) + 1): # перебираем числа от 2 до квадратного корня результата
                if result % i == 0: # если результат делится на i без остатка
                    print("Составное") # выводим "Составное"
                    break # выходим из цикла
            else: # если делителей не найдено
                print("Простое") # выводим "Простое"
        else: # если число меньше или равно 1
            print("Составное") # выводим "Составное"
        return result # возвращаем результат исходной функции
    return wrapper # возвращаем внутреннюю функцию wrapper

@is_prime # оборачиваем функцию sum_three декоратором is_prime
def sum_three(a, b, c): # определяем функцию, которая складывает три числа
    return a + b + c # возвращаем сумму трёх чисел

# Пример использования
result = sum_three(2, 3, 6) # вызываем функцию sum_three с аргументами 2, 3 и 6
print(result) # выводим результат на консоль
